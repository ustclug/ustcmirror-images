diff --git a/bin/ftpsync b/bin/ftpsync
index e3960fa..abe0a14 100755
--- a/bin/ftpsync
+++ b/bin/ftpsync
@@ -13,6 +13,8 @@ set -E
 # success fully.
 set -o pipefail
 
+[[ $DEBUG = true ]] && set -x
+
 # ftpsync script for Debian
 # Based losely on a number of existing scripts, written by an
 # unknown number of different people over the years.
@@ -113,22 +115,6 @@ cleanup() {
     # all done. Mail the log, exit.
     log "Mirrorsync done";
 
-    if [[ -n ${MAILTO} ]]; then
-        # In case rsync had something on stderr
-        if [[ -s ${LOGDIR}/rsync-${NAME}.error ]]; then
-            mail -E -s "[${PROGRAM}@$(hostname -s)] ($$) rsync ERROR on $(date +"%Y.%m.%d-%H:%M:%S")" ${MAILTO} < "${LOGDIR}/rsync-${NAME}.error"
-        fi
-        if [[ ${ERRORSONLY} = false ]]; then
-            # And the normal log
-            MAILFILES="${LOG}"
-            if [[ ${FULLLOGS} = true ]]; then
-                # Someone wants full logs including rsync
-                MAILFILES="${MAILFILES} ${LOGDIR}/rsync-${NAME}.log"
-            fi
-            cat ${MAILFILES} | mail -E -s "[${PROGRAM}@$(hostname -s)] archive sync finished on $(date +"%Y.%m.%d-%H:%M:%S")" ${MAILTO}
-        fi
-    fi
-
     savelog "${LOGDIR}/rsync-${NAME}.log"
     savelog "${LOGDIR}/rsync-${NAME}.error"
     savelog "$LOG" > /dev/null
@@ -394,7 +380,7 @@ LOGROTATE=${LOGROTATE:-14}
 # Our lockfile
 LOCK=${LOCK:-"${TO}/Archive-Update-in-Progress-${MIRRORNAME}"}
 # timeout for the lockfile, in case we have bash older than v4 (and no /proc)
-LOCKTIMEOUT=${LOCKTIMEOUT:-3600}
+LOCKTIMEOUT=${LOCKTIMEOUT:-7200}
 # sleeping time when an AUIP file is found but is not ours
 UIPSLEEP=${UIPSLEEP:-1200}
 # retries whenever an upstream (or possibly stale) AUIP file is found
@@ -776,82 +762,5 @@ fi
 # Remove the Archive-Update-in-Progress file before we push our downstreams.
 rm -f "${LOCK}"
 
-# Check if there is a newer version of ftpsync. If so inform the admin, but not
-# more than once every third day.
-if [[ -r ${TO}/project/ftpsync/LATEST.VERSION ]]; then
-    LATEST=$(< "${TO}/project/ftpsync/LATEST.VERSION")
-    if ! [[ ${LATEST} =~ [0-9]+ ]]; then
-        LATEST=0
-    fi
-    if [[ ${LATEST} -gt ${VERSION} ]]; then
-        if [[ -n ${MAILTO} ]]; then
-            difference=0
-            if [[ -f ${LOGDIR}/ftpsync.newversion ]]; then
-                stamptime=$(< "${LOGDIR}/ftpsync.newversion")
-                unixtime=$(date +%s)
-                difference=$(( $unixtime - $stamptime ))
-            fi
-            if [[ ${difference} -ge 259200 ]]; then
-                # Only warn every third day
-                mail -s "[$(hostname -s)] Update for ftpsync available" ${MAILTO} <<EOF
-Hello admin,
-
-i found that there is a new version of me available.
-Me lonely ftpsync is currently version: ${VERSION}
-New release of myself is available as:  ${LATEST}
-
-Me, myself and I - and the Debian mirroradmins - would be very grateful
-if you could update me. You can find the latest version on your mirror,
-check $(hostname -s):${TO}/project/ftpsync/ftpsync-${LATEST}.tar.gz
-
-You can ensure the validity of that file by using sha512sum or md5sum
-against the available checksum files secured with a signature from the
-Debian FTPMaster signing key.
-
-EOF
-
-                date +%s > "${LOGDIR}/ftpsync.newversion"
-            fi
-        fi
-    else
-        # Remove a possible stampfile
-        rm -f "${LOGDIR}/ftpsync.newversion"
-    fi
-fi
-
-if [[ ${HUB} = true ]]; then
-    # Trigger slave mirrors if we had a push for stage2 or all, or if its mhop
-    if [[ true = ${SYNCSTAGE2} ]] || [[ true = ${SYNCALL} ]] || [[ true = ${SYNCMHOP} ]]; then
-        RUNMIRRORARGS=""
-        if [[ -n ${ARCHIVE} ]]; then
-            # We tell runmirrors about the archive we are running on.
-            RUNMIRRORARGS="-a ${ARCHIVE}"
-        fi
-        # We also tell runmirrors that we are running it from within ftpsync, so it can change
-        # the way it works with mhop based on that.
-        RUNMIRRORARGS="${RUNMIRRORARGS} -f"
-
-        if [[ true = ${SYNCSTAGE1} ]]; then
-            # This is true when we have a mhop sync. A normal multi-stage push sending stage1 will
-            # not get to this point.
-            # So if that happens, tell runmirrors we are doing mhop
-            RUNMIRRORARGS="${RUNMIRRORARGS} -k mhop"
-        elif [[ true = ${SYNCSTAGE2} ]]; then
-            RUNMIRRORARGS="${RUNMIRRORARGS} -k stage2"
-        elif [[ true = ${SYNCALL} ]]; then
-            RUNMIRRORARGS="${RUNMIRRORARGS} -k all"
-        fi
-        log "Trigger slave mirrors using ${RUNMIRRORARGS}"
-        ${BASEDIR}/bin/runmirrors ${RUNMIRRORARGS}
-        log "Trigger slave done"
-
-        HOOK=(
-            HOOKNR=5
-            HOOKSCR=${HOOK5}
-        )
-        hook $HOOK
-    fi
-fi
-
 # All done, lets call cleanup
 cleanup
